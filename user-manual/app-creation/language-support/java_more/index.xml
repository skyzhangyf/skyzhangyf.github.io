<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rainbond文档中心(5.1版)</title>
    <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/</link>
    <description>Recent content on Rainbond文档中心(5.1版)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Gradle源码创建</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-gradle/</guid>
      <description>Gradle项目识别策略 平台默认会根据源码根目录是否有gradlew文件或者build.gradle来识别为Java Gradle项目.
平台编译运行机制  预编译处理完成后,会根据语言类型选择Java-Gradle的buildpack去编译项目.在编译过程中会安装定义的JDK版本; 编译完成后会检查是否在平台设置了Procfile参数,若配置了会重写启动命令配置文件Procfile.  平台默认Gradle编译命令
gradlew build -x test  Gradle项目源码规范 在此步骤中，你需要提供一个可用的Java Gradle源码程序用来部署在Rainbond平台上,此应用程序至少需要满足如下条件:
 本地可以正常运行的Gradle程序 源码程序必须托管在gitlab等相关git或者svn服务上 源码程序根路径下必须需要存在gradlew文件或者build.gradle  编译运行环境设置 在选择JDK版本或其他组件版本时，需要注意JDK或者其他组件版本不要选择比项目使用的版本过高或者过低以免导致源码编译失败  OpenJDK支持 当前Rainbond支持OpenJDK如下版本为：
 Java 1.6 - 1.6.0_27 Java 1.7 - 1.7.0_95 Java 1.8 - 1.8.0_74 Java 1.9 - 1.9-latest Java 10 - 10.0.2 Java 11 - 11.0.1  平台默认版本使用1.8。若需要使用其他版本的OpenJDK，可以通过在源码根目录下添加system.properties文件来设定java.runtime.version的值来指定所需版本的JDK。
# system.properties 目前Rainbond能识别的版本值为11,10,1.9,1.8,1.7,1.6 java.runtime.version=1.8  OracleJDK支持 平台目前也支持OracleJDK,但此特性需要在平台里启用才会生效。
默认不内置提供OracleJDK下载,需要在设置里启用OracleJDK后配置相关OracleJDK下载地址。
OracleJDK下载地址格式要求: http://&amp;lt;web服务URL&amp;gt;/jdk-8u201-linux-x64.tar.gz
平台设置的配置优先级要高于程序代码中定义的配置，如Java JDK版本的选择,在程序代码里通过`system.properties`指定了JDK版本为1.9,在平台上选择了JDK版本为11,那么默认在进行源码编译时会优先使用平台指定的版本JDK11  示例demo程序 示例https://github.com/goodrain/java-gradle-demo</description>
    </item>
    
    <item>
      <title>Java Jar源码构建应用</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-jar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-jar/</guid>
      <description>Jar项目识别策略 平台默认会根据源码根目录是否有Jar包来识别为Java Jar项目.
平台编译运行机制  预编译处理会探测是否定义了启动命令配置文件Procfile,如果未定义会生成默认Jar包启动配置文件; 预编译处理完成后,会根据语言类型选择Java-jar的buildpack去编译项目.在编译过程中会安装定义的JDK版本; 编译完成后会检查是否在平台设置了Procfile参数,若配置了会重写启动命令配置文件Procfile.  Jar项目源码规范 在此步骤中，你需要提供一个可用的Java Jar源码程序用来部署在Rainbond平台上,此应用程序至少需要满足如下条件:
 本地可以正常运行的Jar包 源码程序必须托管在gitlab等相关git或者svn服务上 源码程序根路径下必须需要存在Jar包文件  Procfile规范 如果项目未定义Procfile文件,平台默认会生成默认Procfile来运行Jar包。
web: java -Dserver.port=$PORT $JAVA_OPTS -jar ./*.jar  上述是默认Procfile,如果需要扩展更多启动参数,可以自定义Procfile。
1. `web:`和`java`之间有一个空格 2. 文件结尾不能包含特殊字符 3. JAVA_OPTS: 平台会根据应用的内存大小，自动设置Xmx和Xms的值 4. PORT: 根据用户在平台设置的端口决定监听，默认监听端口为 5000  编译运行环境设置 在选择JDK版本或其他组件版本时，需要注意JDK或者其他组件版本不要选择比项目使用的版本过高或者过低以免导致源码编译失败  OpenJDK支持 当前Rainbond支持OpenJDK如下版本为：
 Java 1.6 - 1.6.0_27 Java 1.7 - 1.7.0_95 Java 1.8 - 1.8.0_74 Java 1.9 - 1.9-latest Java 10 - 10.0.2 Java 11 - 11.0.1  平台默认版本使用1.</description>
    </item>
    
    <item>
      <title>Java Maven源码构建应用</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-maven/</guid>
      <description>Maven项目识别策略 平台默认会通过pom.xml来识别源码项目为Java Maven项目。
编译原理  预编译处理会探测是否定义了启动命令配置文件Procfile,如果未定义会根据打包类型或者项目框架生成默认Procfile文件; 预编译处理完成后,会根据语言类型选择Java的buildpack去编译项目.在编译过程中会安装定义的JDK版本，Maven版本，然后构建编译Maven源码项目; 编译完成后会检查是否在平台设置了Procfile参数,若配置了会重写启动命令配置文件Procfile.  默认Maven项目构建命令如下
mvn -DskipTests clean dependency:list install  Maven项目源码规范 在此步骤中，你需要提供一个可用的Java Maven源码程序用来部署在Rainbond平台上,此应用程序至少需要满足如下条件:
 本地可以使用默认Maven命令正常构建的Java Maven源码程序,多模块项目需要确定子模块可以单独编译即mvn install -pl &amp;lt;modulename&amp;gt; -am 源码程序必须托管在gitlab等相关git或者svn服务上 源码程序根路径下必须需要存在Java的依赖管理工具Maven所需的pom.xml文件  1. pom.xml规范 SpringBoot项目打包方式推荐使用 jar 包方式 非SpringBoot项目打包方式推荐使用 war 包方式
2. Procfile规范 如果项目未定义Procfile文件,平台默认会根据识别项目类型生成默认Procfile。
 打包方式为 war 包,平台使用 webapp-runner.jar 将打包的 war 包运行起来。示例  web: java $JAVA_OPTS -jar ./webapp-runner.jar --port $PORT target/*.war   打包方式为 jar 包,示例  web: java -Dserver.port=$PORT $JAVA_OPTS -jar target/*.jar  上述是默认Procfile,如果需要扩展更多启动参数,可以自定义Procfile。</description>
    </item>
    
    <item>
      <title>Java War源码构建应用</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-war/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/java-war/</guid>
      <description>War项目识别策略 平台默认会根据源码根目录下是否有War文件来识别为Java War项目。
平台编译运行机制  预编译处理会探测是否定义了启动命令配置文件Procfile,如果未定义会生成默认War包启动配置文件; 预编译处理完成后,会根据语言类型选择Java-war的buildpack去编译项目.在编译过程中会安装定义的JDK版本,Web服务; 编译完成后会检查是否在平台设置了Procfile参数,若配置了会重写启动命令配置文件Procfile.  War项目源码规范 在此步骤中，你需要提供一个可用的Java War源码程序用来部署在Rainbond平台上,此应用程序至少需要满足如下条件:
 本地可以正常运行的War包 源码程序必须托管在gitlab等相关git或者svn服务上 源码程序根路径下必须需要存在War文件(即项目已经打成war文件)  Procfile规范 如果项目未定义Procfile文件,平台默认会生成默认Procfile来运行War包。
web: java $JAVA_OPTS -jar ./webapp-runner.jar --port $PORT ./*.war  上述是默认Procfile,如果需要扩展更多启动参数,可以自定义Procfile。
1. `web:`和`java`之间有一个空格 2. 文件结尾不能包含特殊字符 3. JAVA_OPTS: 平台会根据应用的内存大小，自动设置Xmx和Xms的值 4. PORT: 根据用户在平台设置的端口决定监听，默认监听端口为 5000  当调整了Web服务器支持后，打包成War需要调整启动命令 - 选择tomcat不同版本时 `web: java $JAVA_OPTS -jar ./webapp-runner.jar --port $PORT ./*.war` - 选择jetty不同版本时 `web: java $JAVA_OPTS -jar ./jetty-runner.jar --port $PORT ./*.war` 需要配置context path,可以通过自定义Procfile指定[webapp-runner参数path](https://github.com/jsimone/webapp-runner#options) - 示例 `web: java $JAVA_OPTS -jar .</description>
    </item>
    
    <item>
      <title>Jetty-Runner</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/jetty-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/jetty-runner/</guid>
      <description>##Jetty 和 Jetty Runner 是什么
Jetty 是一个轻量级的 Java 应用程序 server。为应用程序的启动提供了一系列灵活的特性。其中一个比较灵活的特性就是可以使用嵌入式的Jetty，在 java-hello 代码中可以看到这种使用方式。另外一个好的特性就是 Jetty Runner本身就是一个jar文件。Jetty的每一次发布版本都会包含一个 Jetty Runner jar 文件。这个jar文件可以通过java命令配合war文件直接运行。例如下面的示例：
$ java -jar jetty-runner.jar application.war  Jetty Runner 会启动一个Jetty实例将war运行起来。
##创建应用程序
$ mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp ... [INFO] Generating project in Interactive mode Define value for property &#39;groupId&#39;: : com.example Define value for property &#39;artifactId&#39;: : helloworld  (你可以使用任意的 groupId 或 artifactId)。执行完上面的命令后，helloworld目录会生成一个完帐的Java web 应用。
##配置Maven下载Jetty Runner
pom.xml文件是Maven进行工作的主要配置文件。在这个文件中我们可以配置Maven项目的groupId、artifactId和version等Maven项目必须的元素；可以配置Maven项目需要使用的远程仓库；可以定义Maven项目打包的形式；可以定义Maven项目的资源依赖关系等等。
在这一步我们以依赖插件的形式下载Jetty Runner包，将下面内容添加到您pom.xml的合适位置:
&amp;lt;build&amp;gt; ... &amp;lt;plugins&amp;gt; ... &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring Boot框架配置MySQL</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/spring-boot-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/spring-boot-mysql/</guid>
      <description>Spring Boot框架简化了新Spring应用的初始搭建以及开发过程，云帮支持平台部署Spring Boot类应用。
云帮提供Spring Boot配置MySQL服务的示例，您可以在云市 一键式部署 Spring Boot-MySQL示例
以下内容是本地创建和运行该示例的过程：
创建示例 使用spring-boot-cli创建示例
$ docker run -it --rm \ -v $PWD:/app goodrainapps/spring-boot-cli:1.5.9 spring init --dependencies=web spring-boot-mysql-demo  进入示例类文件存放目录
$ cd spring-boot-mysql-demo/src/main/java/com/example/springbootmysqldemo  添加DemoApplication.java
@Controller @SpringBootApplication public class DemoApplication { @RequestMapping(&amp;quot;/&amp;quot;) @ResponseBody String home() { return &amp;quot;Hello World!&amp;quot;; } public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } }  构建示例 为了加快maven构建，在setting.xml中添加了国内的mirror。将setting.xml拷贝到您的spring-boot-mysql-demo中。
$ cd spring-boot-mysql-demo $ docker run -it --rm \ -v &amp;quot;$PWD&amp;quot;:/app/build \ -w /app/build maven:3.</description>
    </item>
    
    <item>
      <title>Tomcat配置Redis实现Session共享</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/tomcat-redis-session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/tomcat-redis-session/</guid>
      <description>为了使您的应用承受更多的并发，提高应用稳定性，您需要在适当情况下进行扩容。每个节点下的Tomcat只存储来访问自己的请求时产生的session，为了解决扩容后session持久化的问题，我们提供 Java的War包项目使用Tomcat配置Redis实现Session共享 解决方案，将您session储存在redis中来保证您应用程序稳定性。如图所示：

 若 Load Balancing 将请求发送给 container 1 下的 tomcat A ，同时产生 session ，将此 session 持久化到Redis 中。当 Web Server 再次发送请求，若请求到 container 2的 tomcat A ，此时会在Redis 中找到已存在的 session，即取即用。
 通过源码构建，您可以通过如下两种方式实现 配置redis实现session共享:
使用Webapp-Runner或Jetty-Runner 云帮使用 [webapp-Runner]() 内嵌的 tomcat 或 [jetty-Runner]() 内嵌的 jetty 实现服务器功能。在您不创建其他服务器情况下即可轻松将应用部署在云帮。通过以下步骤可实现 配置redis实现session共享。
 配置Procfile：将如下命令添加到您的Procfile中，并源码根目录下添加Procfile。
web: java -jar ./webapp-runner.jar --port $PORT --session-store redis ./*.war   指定了监听端口，通过获取环境变量 $PORT,此变量Rainbond根据平台设置的服务端口进行自动注入 指定session存储--session-store redis  从应用市场安装Redis服务，并设置当前服务依赖创建的Redis服务，参考文档 依赖服务
 应用配置redis：将REDIS_URL新增至应用环境变量中，值为 redis://:${REDIS_PASS}@127.0.0.1:6379。
 重启应用以适配</description>
    </item>
    
    <item>
      <title>webapp-runner使用指南</title>
      <link>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/webapp-runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://skyzhangyf.github.io/user-manual/app-creation/language-support/java_more/webapp-runner/</guid>
      <description>webapp-runner可以在任何安装有JRE环境的系统中利用Tomcat将应用程序启动。使用webapp-runner不需要安装Tomcat。它只是一个jar文件可以用java命令运行和配置。
版本说明  Webapp Runner 是基于Tomcat server的。默认Rainbond支持的版本如下:
    web服务支持 web服务版本 自定义Procfile中jar文件名     tomcat7 webapp-runner-7.0.91.0.jar webapp-runner.jar   tomcat8 webapp-runner-8.0.52.0.jar webapp-runner.jar   tomcat85 (默认) webapp-runner-8.5.38.0.jar webapp-runner.jar   tomcat9 webapp-runner-9.0.16.0.jar webapp-runner.jar   jetty7 jetty-runner-7.5.4.v20111024.jar jetty-runner.jar   jetty9 jetty-runner-9.4.0.v20161208.jar jetty-runner.jar    Webapp Runner 是如何工作的 在本地或Rainbond使用webapp-runner启动应用程序时的命令类似如下格式：
$ java -jar ./webapp-runner.jar myProject.war  or
$ java -jar ./webapp-runner.jar path/to/my/project  help
$ java -jar .</description>
    </item>
    
  </channel>
</rss>